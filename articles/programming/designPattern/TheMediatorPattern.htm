<section id="articleTitle"></section>
<section id="articleBody">
	<script src="/articles/programming/designPattern/mediator.js" type="text/javascript"></script>
	<link href="/webresources/bootstrap/css/docs.css" rel="stylesheet" type="text/css" />
	<script src="/webresources/bootstrap/js/prettify.js" type="text/javascript"></script>
	<link href="/webresources/css/prettify.css" rel="stylesheet" type="text/css" />
	<style type="text/css">#chatResult{border:1px solid #ddd;padding:15px;margin:10px;}</style>
	<div class="alert alert-block">
		本文代码出自&nbsp;&nbsp;
		<a href='http://addyosmani.com/resources/essentialjsdesignpatterns/book/#highlighter_65020' target="_blank">
			http://addyosmani.com/resources/essentialjsdesignpatterns/book/#highlighter_65020
		</a>
		<br/>
		稍作修改
	</div>

	<h4>案例</h4>

	<div class="bs-docs-example">
		<form class="form-horizontal" id="chatForm">
			<div class="control-group">
				<label for="fromBox" class="control-label">Your Name:</label>
				<div class="controls">
					<input id="fromBox" type="text" autocomplete="off"/>
				</div>
			</div>
			<div class="control-group">
				<label for="toBox" class="control-label">Send to:</label>
				<div class="controls">
					<input id="toBox" type="text" autocomplete="off"/>
				</div>
			</div>

			<div class="control-group">
				<label for="chatBox" class="control-label">Message:</label>
				<div class="controls">
					<input id="chatBox" type="text" autocomplete="off"/>
					<a class="btn" id="btnchat">Chat</a>
				</div>
			</div>
		</form>

		<div id="chatResult"></div>

		<script type="text/javascript">
			var mediator = new Mediator();
				$( "#btnchat" ).on( "click", function(e) {
			    var text = $( "#chatBox" ).val(),
			        from = $( "#fromBox" ).val(),
			        to = $( "#toBox" ).val();
			    mediator.Publish( "newMessage" , { message: text, from: from, to: to } );
			});

			function displayChat( data ) {
			    var date = new Date(),
			        msg = data.from + " said \"" + data.message + "\" to " + data.to;			 
			    $( "#chatResult" )
			        .prepend("<p>" + msg + " (" + date.toLocaleTimeString() + ")</p>");
			}
			 
			function logChat( data ) {
			    if ( window.console ) {
			        console.log( data );
			    }
			}
			 
			mediator.Subscribe( "newMessage", displayChat );
			mediator.Subscribe( "newMessage", logChat );
			 
			function amITalkingToMyself( data ) {
			    return data.from === data.to;
			}
			 
			function iAmClearlyCrazy( data ) {
			    $( "#chatResult" ).prepend("<p>" + data.from + " is talking to himself.</p>");
			}
			 
			mediator.Subscribe( amITalkingToMyself, iAmClearlyCrazy );
		</script>
	</div>

	<h6>The Mediator Pattern</h6>
	<pre class="prettyprint linenums">
(function(root) {
	function guidGenerator() {
		return +new Date();
	}

	function Subscriber(fn, options, context) {
		if (!(this instanceof Subscriber)) {
			return new Subscriber(fn, options, context);
		} else {
			this.id = guidGenerator();
			this.fn = fn,
			this.options = options;
			this.topic = null;
		}
	}

	function Topic(namespace) {
		if (!(this instanceof Topic)) {
			return new Topic(namespace);
		} else {
			this.namespace = namespace || "";
			this._callbacks = [];
			this._topics = [];
			this.stopped = false;
		}
	}

	Topic.prototype = {
		AddSubscriber: function(fn, options, context) {
			var callbacks = new Subscriber(fn, options, context);
			this._callbacks.push(callbacks);
			callbacks.topic = this;
			return callbacks;
		},
		StopPropagation: function() {
			this.stopped = true;
		},
		GetSubscriber: function(identifier) {
			for (var x = 0, y = this._callbacks.length; x &lt; y; x++) {
				if (this._callbacks[x].id == identifier || this._callbacks[x].fn == identifier) {
					return this._callbacks[x];
				}
			}

			for (var z in this._topics) {
				if (this._topics.hasOwnProperty(z)) {
					var sub = this._topics[z].GetSubscriber(identifier);
					if (sub !== undefined) {
						return sub;
					}

				}
			}
		},
		AddTopic: function(topic) {
			this._topics[topic] = new Topic((this.namespace ? this.namespace + ":" : "") + topic);
		},
		HasTopic: function(topic) {
			return this._topics.hasOwnProperty(topic);
		},
		ReturnTopic: function(topic) {
			return this._topics[topic];
		},
		RemoveSubscriber: function(identifier) {
			if (!identifier) {
				this._callbacks = [];
				for (var z in this._topics) {
					if (this._topics.hasOwnProperty(z))
						this._topics[z].RemoveSubscriber(identifier);
				}
			}
			for (var y = 0, x = this._callbacks.length; y &lt; x; y++) {
				if (this._callbacks[y].fn == identifier || this.callback[y].id == identifier) {
					this._callbacks[y].topic = null;
					this._callbacks.splice(y, 1);
					x--;
					y--;
				}
			}
		},

		Publish: function(data) {
			for (var y = 0, x = this._callbacks.length; y &lt; x; y++) {
				var callback = this._callbacks[y],
					l;
				callback.fn.apply(callback.context, data);
				l = this._callbacks.length;
				if (l &lt; x) {
					y--;
					x = l;
				}
			}

			for (var z in this._topics) {
				if (!this.stopped) {
					if (this._topics.hasOwnProperty(z)) {
						this._topics[z].Publish(data);
					}
				}
			}
			this.stopped = false;
		}
	};

	function Mediator() {
		if (!(this instanceof Mediator)) {
			return new Mediator();
		} else {
			this._topics = new Topic("");
		}
	}

	Mediator.prototype = {
		GetTopic: function(namespace) {
			// debugger;
			var topic = this._topics;
			var	namespaceHierarchy = namespace?(namespace+"").split(":"):"";

			if (namespace === "") {
				return topic;
			}

			if (namespaceHierarchy.length > 0) {
				for (var i = 0, j = namespaceHierarchy.length; i &lt; j; i++) {

					if (!topic.HasTopic(namespaceHierarchy[i])) {
						topic.AddTopic(namespaceHierarchy[i]);
					}

					topic = topic.ReturnTopic(namespaceHierarchy[i]);
				}
			}

			return topic;
		},

		Subscribe: function(topicName, fn, options, context) {
			var options = options||{},
				context = context||{},
				topic = this.GetTopic(topicName),
				sub = topic.AddSubscriber(fn, options, context);
			return sub;
		},

		GetSubscriber: function(identifier, topic) {
			return this.GetTopic(topic || "").GetSubscriber(identifier);
		},

		Remove: function(topicName, identifier) {
			this.GetTopic(topicName).RemoveSubscriber(identifier);
		},

		Publish: function(topicName) {
			var args = Array.prototype.slice.call(arguments, 1),
				topic = this.GetTopic(topicName);
			args.push(topic);
			this.GetTopic(topicName).Publish(args);
		}
	};

	root.Mediator = Mediator;
	Mediator.Topic = Topic;
	Mediator.Subscriber = Subscriber;
})(window);</pre>

	<h6>html</h6>
	<pre class="prettyprint linenums">
&lt;form class="form-horizontal" id="chatForm"&gt;
	&lt;div class="control-group"&gt;
		&lt;label for="fromBox" class="control-label"&gt;Your Name:&lt;/label&gt;
		&lt;div class="controls"&gt;
			&lt;input id="fromBox" type="text" autocomplete="off"/&gt;
		&lt;/div&gt;
	&lt;/div&gt;
	&lt;div class="control-group"&gt;
		&lt;label for="toBox" class="control-label"&gt;Send to:&lt;/label&gt;
		&lt;div class="controls"&gt;
			&lt;input id="toBox" type="text" autocomplete="off"/&gt;
		&lt;/div&gt;
	&lt;/div&gt;

	&lt;div class="control-group"&gt;
		&lt;label for="chatBox" class="control-label"&gt;Message:&lt;/label&gt;
		&lt;div class="controls"&gt;
			&lt;input id="chatBox" type="text" autocomplete="off"/&gt;
			&lt;a class="btn" id="btnchat"&gt;Chat&lt;/a&gt;
		&lt;/div&gt;
	&lt;/div&gt;
&lt;/form&gt;

&lt;div id="chatResult"&gt;&lt;/div&gt;</pre>

	<h6>script</h6>
	<pre class="prettyprint linenums">
var mediator = new Mediator();
$( "#btnchat" ).on( "click", function(e) {
    var text = $( "#chatBox" ).val(),
        from = $( "#fromBox" ).val(),
        to = $( "#toBox" ).val();
    mediator.Publish( "newMessage" , { message: text, from: from, to: to } );
});
 

function displayChat( data ) {
    var date = new Date(),
        msg = data.from + " said \"" + data.message + "\" to " + data.to;
 
    $( "#chatResult" )
        .prepend("&lt;p&gt;" + msg + " (" + date.toLocaleTimeString() + ")&lt;/p&gt;");
}
 
function logChat( data ) {
    if ( window.console ) {
        console.log( data );
    }
}
 
mediator.Subscribe( "newMessage", displayChat );
mediator.Subscribe( "newMessage", logChat );
 
function amITalkingToMyself( data ) {
    return data.from === data.to;
}
 
function iAmClearlyCrazy( data ) {
    $( "#chatResult" ).prepend("&lt;p&gt;" + data.from + " is talking to himself.&lt;/p&gt;");
}
 
mediator.Subscribe( amITalkingToMyself, iAmClearlyCrazy );
	</pre>

</section>
<script type="text/javascript">
	(function(){
		prettyPrint();
	})();
	(function(){
		$(".tipInfo").tooltip();
	})();
</script>